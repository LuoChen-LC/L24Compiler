/* Generated By:JavaCC: Do not edit this line. L24.java */
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.util.ArrayList;

public class L24 implements L24Constants {

    public static void main(String args[]) throws ParseException {
            try {
                InputStream inputstream = new FileInputStream("src/main/resources/ValueJug.l24");
                L24 parser = new L24(inputstream);
                parser.Program();
            }catch (Exception e){
                System.err.println(e);
            }
        }
    /**全局字母表*/
    public static ArrayList<Symbol> list = new ArrayList();
    /**中间代码表*/
    public static ArrayList<MiddleCode> midCodeList = new ArrayList();
    /**
      * @Description: 添加符号表
      * @author LuoTianYi
      *
    **/
    public static void addSymbol(Token t){
        Symbol s = new Symbol(SymbolType.intSym);
        s.setName(t.image);//Token的实际文本
        for(int i = 0; i < list.size(); i++){
            if (list.get(i).getName().equals(s.getName())) {
                ErrorExecute.showErrMsg(1,"\u53d8\u91cf\u91cd\u590d\u58f0\u660e");
            }
        }
        list.add(s);
    }
    /**
      * @Description: 输出中间代码内容
      * @author LuoTianYi
      *
    **/
    public static void outPutMiddleCodeList(){
        for(int i = 0; i < midCodeList.size(); i++) {
            MiddleCode m = midCodeList.get(i);
            System.out.println(m.toString());
        }
    }
    /**
      * @Description: 请求数据空间
      * @author LuoTianYi
      *
    **/
    public static void askForSpace(){
        if(list.size()>100){
            ErrorExecute.showErrMsg(6,"\u7b26\u53f7\u8868\u6ea2\u51fa");
            //超过字母表最大容量
        }
        MiddleCode code = new MiddleCode(MiddleCode.CodeType.INT,0,list.size());
        midCodeList.add(code);
    }
    /**
      * @Description 输出中间代码到指定文件
      * @return
      * @author LuoTianYi
      *
    **/
    public static void outPutGoalCode(){
        FileOutputStream out;
        try{
            out = new FileOutputStream("src/main/resources/output.txt");
            for(int i = 0; i < midCodeList.size(); i++) {
              MiddleCode code = midCodeList.get(i);
              out.write(code.toString().getBytes("GBK"));
              out.write("\r\n".getBytes("GBK"));
            }
            out.close();
        }catch (Exception e){
            ErrorExecute.showErrMsg(7,"\u6587\u4ef6\u8f93\u51fa\u9519\u8bef");
        }
    }
    /**
      * @Description 给符号表变量赋值或取变量值
      * @param 取0:LOD 取1:STO
      * @return
      * @author LuoTianYi
      *
    **/
    public static void getVariableById(Token t, int type){
        String id = t.image;
        boolean isFind = false;
        int relative = -1;
        for(int i = 0; i < list.size(); i++) {
          if(list.get(i).getType()==SymbolType.intSym){
                relative++;
                if(list.get(i).getName().equals(id)){
                    isFind = true;
                    if(list.get(i).getValue()>Integer.MAX_VALUE||list.get(i).getValue()<Integer.MIN_VALUE){
                        ErrorExecute.showErrMsg(5,"\u53d8\u91cf\u6ea2\u51fa");
                        //变量溢出
                    }
                    if(type==0){
                        MiddleCode code = new MiddleCode(MiddleCode.CodeType.LOD,0,relative);
                        midCodeList.add(code);
                    }
                    else{
                        MiddleCode code = new MiddleCode(MiddleCode.CodeType.STO,0,relative);
                        midCodeList.add(code);
                    }
                }
          }
        }
        if(!isFind){
            ErrorExecute.showErrMsg(0,"\u53d8\u91cf\u672a\u58f0\u660e");
            //变量未声明
        }
    }

  final public void Program() throws ParseException {
    if (jj_2_1(2)) {
      Definition();
    } else {
      ;
    }
    MainFunction();
    jj_consume_token(0);

  }

  final public void Definition() throws ParseException {
    Token s;
    jj_consume_token(VAR);
    s = jj_consume_token(IDENT);
              addSymbol(s);
    label_1:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_1;
      }
      jj_consume_token(COMMA);
      s = jj_consume_token(IDENT);
              addSymbol(s);
    }
    jj_consume_token(SEMICOLON);
                askForSpace();
  }

  final public void MainFunction() throws ParseException {
    jj_consume_token(MAIN);
    jj_consume_token(LCURLY);
    Statement_list();
    jj_consume_token(RCURLY);
  }

  final public void Statement_list() throws ParseException {
    label_2:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_2;
      }
      Statement();
      jj_consume_token(SEMICOLON);
    }
  }

  final public void Statement() throws ParseException {
    if (jj_2_4(2)) {
      AssignmentStatement();
    } else if (jj_2_5(2)) {
      IfStatement();
    } else if (jj_2_6(2)) {
      WhileStatement();
    } else if (jj_2_7(2)) {
      ScanStatement();
    } else if (jj_2_8(2)) {
      PrintStatement();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void AssignmentStatement() throws ParseException {
    Token s;
    //<ident> "=" <expr>
        s = jj_consume_token(IDENT);
    jj_consume_token(ASSIGN);
    Expression();
        getVariableById(s,1);
  }

  final public void IfStatement() throws ParseException {
    int jpcAddress;
    int jmpAddress;
    jj_consume_token(IF);
    jj_consume_token(LPA);
    BoolExpression();
        MiddleCode code = new MiddleCode(MiddleCode.CodeType.JPC,0,0);
        midCodeList.add(code);
        jpcAddress = midCodeList.size()-1;
    jj_consume_token(RPA);
    jj_consume_token(THEN);
    jj_consume_token(LCURLY);
    Statement_list();
        MiddleCode code2 = new MiddleCode(MiddleCode.CodeType.JMP,0,midCodeList.size()+1);
        midCodeList.add(code2);
        midCodeList.get(jpcAddress).a = midCodeList.size();
        jmpAddress = midCodeList.size()-1;
    jj_consume_token(RCURLY);
    if (jj_2_9(2)) {
      jj_consume_token(ELSE);
      jj_consume_token(LCURLY);
      Statement_list();
        midCodeList.get(jmpAddress).a = midCodeList.size();
      jj_consume_token(RCURLY);
    } else {
      ;
    }
    jj_consume_token(END);
  }

  final public void WhileStatement() throws ParseException {
    int beginAddress;
    int jpcAddress;
    int endAddress;
    jj_consume_token(WHILE);
            beginAddress = midCodeList.size();
    jj_consume_token(LPA);
    BoolExpression();
        MiddleCode code = new MiddleCode(MiddleCode.CodeType.JPC,0,0);
        midCodeList.add(code);
        jpcAddress = midCodeList.size()-1;
    jj_consume_token(RPA);
    jj_consume_token(LCURLY);
    Statement_list();
        MiddleCode code2 = new MiddleCode(MiddleCode.CodeType.JMP,0,beginAddress);
        midCodeList.add(code2);
        midCodeList.get(jpcAddress).a = midCodeList.size();
    jj_consume_token(RCURLY);
  }

  final public void ScanStatement() throws ParseException {
        Token t;
    jj_consume_token(SCAN);
    jj_consume_token(LPA);
    t = jj_consume_token(IDENT);
            MiddleCode code = new MiddleCode(MiddleCode.CodeType.OPR,0,16);
            midCodeList.add(code);
            getVariableById(t,1);
    label_3:
    while (true) {
      if (jj_2_10(2)) {
        ;
      } else {
        break label_3;
      }
      jj_consume_token(COMMA);
      t = jj_consume_token(IDENT);
            MiddleCode code1 = new MiddleCode(MiddleCode.CodeType.OPR,0,16);
            midCodeList.add(code1);
            getVariableById(t,1);
    }
    jj_consume_token(RPA);
  }

  final public void PrintStatement() throws ParseException {
        Token t;
    jj_consume_token(PRINT);
    jj_consume_token(LPA);
    Expression();
            MiddleCode code = new MiddleCode(MiddleCode.CodeType.OPR,0,14);
            midCodeList.add(code);
    label_4:
    while (true) {
      if (jj_2_11(2)) {
        ;
      } else {
        break label_4;
      }
      jj_consume_token(COMMA);
      Expression();
            MiddleCode code1 = new MiddleCode(MiddleCode.CodeType.OPR,0,14);
            midCodeList.add(code1);
    }
    jj_consume_token(RPA);
  }

  final public void BoolExpression() throws ParseException {
    Token t;
    Expression();
    if (jj_2_12(2)) {
      t = jj_consume_token(EQL);
    } else if (jj_2_13(2)) {
      t = jj_consume_token(NEQ);
    } else if (jj_2_14(2)) {
      t = jj_consume_token(LSS);
    } else if (jj_2_15(2)) {
      t = jj_consume_token(LEQ);
    } else if (jj_2_16(2)) {
      t = jj_consume_token(GTR);
    } else if (jj_2_17(2)) {
      t = jj_consume_token(GEQ);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    Expression();
        MiddleCode code;
        switch (t.image){
            case "==":
                code = new MiddleCode(MiddleCode.CodeType.OPR,0,8);
                midCodeList.add(code);
                break;
            case "!=":
                code = new MiddleCode(MiddleCode.CodeType.OPR,0,9);
                midCodeList.add(code);
                break;
            case "<":
                code = new MiddleCode(MiddleCode.CodeType.OPR,0,10);
                midCodeList.add(code);
                break;
            case "<=":
                code = new MiddleCode(MiddleCode.CodeType.OPR,0,11);
                midCodeList.add(code);
                break;
            case ">":
                code = new MiddleCode(MiddleCode.CodeType.OPR,0,12);
                midCodeList.add(code);
                break;
            case ">=":
                code = new MiddleCode(MiddleCode.CodeType.OPR,0,13);
                midCodeList.add(code);
                break;
            default:
                break;
    }
  }

  final public void Expression() throws ParseException {
    Token t;
    if (jj_2_20(2)) {
      if (jj_2_18(2)) {
        jj_consume_token(PLUS);
      } else if (jj_2_19(2)) {
        jj_consume_token(MINUS);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
    Term();
    label_5:
    while (true) {
      if (jj_2_21(2)) {
        ;
      } else {
        break label_5;
      }
      if (jj_2_22(2)) {
        t = jj_consume_token(PLUS);
      } else if (jj_2_23(2)) {
        t = jj_consume_token(MINUS);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      Term();
        if(t.image.equals("+")){
            MiddleCode code = new MiddleCode(MiddleCode.CodeType.OPR,0,2);
            midCodeList.add(code);
        }
        else{
            MiddleCode code = new MiddleCode(MiddleCode.CodeType.OPR,0,3);
            midCodeList.add(code);
        }
    }
  }

  final public void Term() throws ParseException {
    Token t;
    Factor();
    label_6:
    while (true) {
      if (jj_2_24(2)) {
        ;
      } else {
        break label_6;
      }
      if (jj_2_25(2)) {
        t = jj_consume_token(MUL);
      } else if (jj_2_26(2)) {
        t = jj_consume_token(DIV);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      Factor();
        if(t.image.equals("*")){
            MiddleCode code = new MiddleCode(MiddleCode.CodeType.OPR,0,4);
            midCodeList.add(code);
        }
        else{
            MiddleCode code1 = new MiddleCode(MiddleCode.CodeType.OPR,0,5);
            midCodeList.add(code1);
        }
    }
  }

  final public void Factor() throws ParseException {
    Token s;
    if (jj_2_27(2)) {
      s = jj_consume_token(IDENT);
            getVariableById(s,0);
    } else if (jj_2_28(2)) {
      s = jj_consume_token(NUMBER);
            if(Integer.parseInt(s.image)>Integer.MAX_VALUE||Integer.parseInt(s.image)<-Integer.MIN_VALUE){
                ErrorExecute.showErrMsg(5,"\u53d8\u91cf\u6ea2\u51fa");
                //超出最大值
            }
            MiddleCode code = new MiddleCode(MiddleCode.CodeType.LIT,0,Integer.parseInt(s.image));
            midCodeList.add(code);
    } else if (jj_2_29(2)) {
      jj_consume_token(LPA);
      Expression();
      jj_consume_token(RPA);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_3_25() {
    if (jj_scan_token(MUL)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(GEQ)) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPA)) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(GTR)) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) return true;
    }
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(LEQ)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_scan_token(LCURLY)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(LSS)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(NEQ)) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPA)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(EQL)) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_scan_token(LPA)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_28() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(PRINT)) return true;
    if (jj_scan_token(LPA)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) return true;
    }
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(DIV)) return true;
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_scan_token(VAR)) return true;
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(SCAN)) return true;
    if (jj_scan_token(LPA)) return true;
    return false;
  }

  private boolean jj_3_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) return true;
    }
    if (jj_3R_15()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public L24TokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[29];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public L24(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public L24(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new L24TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public L24(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new L24TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public L24(L24TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(L24TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[35];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 35; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 29; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
